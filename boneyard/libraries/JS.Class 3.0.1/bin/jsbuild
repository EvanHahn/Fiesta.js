#!/usr/bin/env node

var fs      = require('fs'),
    http    = require('http'),
    https   = require('https'),
    path    = require('path'),
    url     = require('url'),
    
    nopt    = require('nopt'),
    
    options = { manifest: path,
                root:     path,
                external: Boolean,
                packages: Boolean
              },
    
    shorts  = { 'm': '--manifest',
                'r': '--root',
                'e': '--external',
                'p': '--packages',
                'P': '--no-packages'
              },
    
    params  = nopt(options, shorts),
    include = params.argv.remain.slice()

if (include.length === 0) {
  console.error('\nUsage: jsbuild --manifest MANIFEST --root ROOT [OPTIONS] module1 [module2 ...]')
  
  console.error('\nOptions:  --manifest,    -m : path to JS.Packages manifest script')
  console.error('          --root,        -r : directory containing your JavaScripts')
  console.error('          --external,    -e : include external scripts from the web')
  console.error('          --no-packages, -P : don\'t include JS.Package system in build')
  
  console.error('\ne.g. jsbuild -m path/to/js/manifest.js -r path/to/js/ -eP jQuery JS.Set\n')
  
  process.exit()
}

HTTP_REGEX = /^https?:\/\//

JSCLASS_PATH = path.dirname(__filename) + '/../src'
require(JSCLASS_PATH + '/loader')

JS.Package.DSL.file = function(filename) {
  if (!HTTP_REGEX.test(filename) && params.root)
    filename = path.join(params.root, filename)
  
  return JS.Package._getByPath(filename)
}

if (params.manifest) require(params.manifest)

var expand = function(name, list) {
  var pkg  = JS.Package._getByName(name),
      deps = list || [],
      n
  
  n = pkg._deps.list.length
  while (n--) expand(pkg._deps.list[n], deps)
  
  if (deps.indexOf(pkg) === -1) deps.push(pkg)
  
  n = pkg._uses.list.length
  while (n--) expand(pkg._uses.list[n], deps)
  
  return deps
}

var packages = [], n = include.length
while (n--) expand(include[n], packages)

var source = [],
    output = function() { console.log(source.join('\n\n')) }

if (params.packages !== false)
  source.push(fs.readFileSync(JSCLASS_PATH + '/package-browser.js'))

var bundle = function(i) {
  if (i >= packages.length) return output()
  
  var loader = packages[i]._loader
  
  if (typeof loader !== 'string')
    throw new Error('Cannot bundle ' + pkg + ': no path specified')
  
  if (HTTP_REGEX.test(loader))
    bundleRemote(loader, i)
  else
    bundleLocal(loader, i)
}

var bundleLocal = function(loader, i) {
  fs.readFile(loader, function(error, content) {
    if (error)
      throw new Error('Cannot find file ' + loader + ', please check your --root setting')
    
    source.push(content.toString())
    bundle(i + 1)
  })
}

var bundleRemote = function(loader, i) {
  if (!params.external) {
    console.error('Warning: skipping ' + loader + ', pass --external to include it')
    return bundle(i + 1)
  }
  
  var uri     = url.parse(loader),
      client  = (uri.protocol === 'https:') ? https : http,
      port    = uri.port || (client === https ? '443' : '80'),
      options = {host: uri.hostname, port: port, path: uri.pathname},
      close   = (client === https) ? 'close' : 'end',
      body    = ''
  
  client.get(options, function(response) {
    response.addListener('data', function(c) { body += c.toString('utf8', 0, c.length) })
    response.addListener(close, function() {
      source.push(body)
      bundle(i + 1)
    })
  }).on('error', function() {
    throw new Error('Request unsuccessful: ' + loader)
  })
}

bundle(0)

